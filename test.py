# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KY9XVMkPuu5q588iuVknQ1OCziwrFfuK
"""

import unittest
import pandas as pd
from Group_3_mvp import annual_grants, generate_descriptive_statistics, plot_annual_grants, validate_country_input, generate_partner_dataset, save_to_excel
from pandas.testing import assert_frame_equal, assert_series_equal
import matplotlib.pyplot as plt

class TestPartnerSearchApp(unittest.TestCase):

    def setUp(self):
        self.projects_df = pd.DataFrame({
            'year': [2020, 2021],
            'ecMaxContribution': [1000, 2000]
        })

        self.participants_df = pd.DataFrame({
            'country': ['ES', 'FR'],
            'shortName': ['Org1', 'Org2'],
            'name': ['Organization 1', 'Organization 2'],
            'activityType': ['Type1', 'Type2'],
            'organizationURL': ['url1', 'url2'],
            'projectID': [1, 2],
            'ecContribution': [500, 1500]
        })

        self.countries_df = pd.DataFrame({
            'Country': ['Spain', 'France'],
            'Acronym': ['ES', 'FR']
        })

    def test_annual_grants(self):
        """Test the calculation of annual grants."""
        expected = pd.Series([1000, 2000], index=pd.Index([2020, 2021], name='year'), name='ecMaxContribution')
        result = annual_grants(self.projects_df)
        assert_series_equal(result, expected)

    def test_generate_descriptive_statistics(self):
        """Test generation of descriptive statistics for ecContribution."""
        stats = generate_descriptive_statistics(self.projects_df['ecMaxContribution'])
        self.assertTrue('count' in stats and 'mean' in stats)

    def test_plot_annual_grants(self):
        """Test that plotting annual grants does not raise any exceptions."""
        try:
            plot_annual_grants(self.projects_df['ecMaxContribution'])
        except Exception as e:
            self.fail(f"plot_annual_grants raised an exception {e}")

    def test_validate_country_input(self):
        """Test country validation."""
        result = validate_country_input('Spain', self.countries_df)
        self.assertEqual(result, 'ES')

    def test_generate_partner_dataset(self):
        """Test the generation of partner dataset."""
        result = generate_partner_dataset(self.participants_df, 'ES')
        expected_columns = ['shortName', 'name', 'activityType', 'organizationURL', 'count_project', 'sum_ecContribution']
        self.assertEqual(list(result.columns), expected_columns)
        self.assertTrue((result['sum_ecContribution'] == 500).any())  # Checks if the sum is correct

    def test_save_to_excel(self):
        """Test saving data to Excel."""
        filename = 'test_output.xlsx'
        save_to_excel(self.participants_df, filename)
        import os
        self.assertTrue(os.path.exists(filename))
        os.remove(filename)  # Cleanup the file after test

# Configure and run the test suite
suite = unittest.TestLoader().loadTestsFromTestCase(TestPartnerSearchApp)
runner = unittest.TextTestRunner(verbosity=2)
runner.run(suite)